APP_NAME=Porta
APP_ENV="${APP_ENV:-production}"
APP_KEY=
APP_DEBUG="${APP_ENV:-true}"
APP_PORT="${API_PORT:-8000}"
# APP_URL=http://localhost:8000
APP_URL="${APP_SCHEME:-http}://${API_HOST:-localhost}:${APP_PORT}"
#FRONT_URL=http://localhost:8080
FRONT_URL="${APP_SCHEME:-http}://${FRONTEND_HOST:-localhost}:${FRONTEND_PORT:-8080}"
ASSET_URL="${APP_URL}"

#
## ON-PREM INSTALLS ###########################################
#
# Docker customizable @ build time
APP_ONPREM="${APP_ONPREM:-true}"
# Docker customizable @ build time
APP_ONPREM_AIRGAPPED="${APP_ONPREM_AIRGAPPED:-false}"

## SET FOR ON-PREM INSTALLS DURING BUILD STEP
# "main", "backup", "arbiter"
# Docker customizable @ run time
APP_MACHINE_TYPE="${APP_MACHINE_TYPE:-main}"
APP_VERSION="${APP_VERSION}"
APP_VERSION_NUMBER="${APP_VERSION_NUMBER}"
APP_VERSION_DATE="${APP_VERSION_DATE}"
APP_BUILD_NUMBER="${APP_BUILD_NUMBER}"

# on-prem Bridge is running on the same machine
# Docker customizable @ run time
PORTA_BRIDGE_HOST=${PORTA_BRIDGE_HOST}
# Docker customizable @ run time
PORTA_BRIDGE_PORT=${PORTA_BRIDGE_PORT:-1500}

##################################################################

LOG_CHANNEL=daily
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

##
## DATABASE ###################################
##

# Used by Database Health check commands
# Docker customizable @ build time
EXPECTED_DB_CLUSTER_SIZE=${DB_EXPECTED_DB_CLUSTER_SIZE:-3}

# Applies only to ON-PREM INSTALLS using group replication
# Docker customizable @ run time
DB_ONPREM_REPLICATION_ENABLED=${DB_ONPREM_REPLICATION_ENABLED:-true}
# Applies only to ON-PREM INSTALLS using group replication
# Docker customizable @ run time
DB_ONPREM_REPL_GROUP_UUID=${DB_ONPREM_REPL_GROUP_UUID}

## Common
DB_DATABASE=porta
DB_USERNAME=porta
DB_PASSWORD=porta

## Main on-prem DB
DB_CONNECTION_1=mysql
# Docker customizable @ run time
DB_HOST_1=${DB_HOST_1}
# Docker customizable @ run time
DB_PORT_1=${DB_PORT_1:-3306}
DB_DATABASE_1="${DB_DATABASE}"
DB_USERNAME_1="${DB_USERNAME}"
DB_PASSWORD_1="${DB_PASSWORD}"

## Backup on-prem DB (porta-db-2)
# Applies only to ON-PREM INSTALLS using group replication
DB_CONNECTION_2=mysql-2
# Docker customizable @ run time
DB_HOST_2=${DB_HOST_2}
# Docker customizable @ run time
DB_PORT_2=${DB_PORT_2:-3307}
DB_DATABASE_2="${DB_DATABASE}"
DB_USERNAME_2="${DB_USERNAME}"
DB_PASSWORD_2="${DB_PASSWORD}"

## Arbiter on-prem DB (porta-db-3)
# Applies only to ON-PREM INSTALLS using group replication
DB_CONNECTION_3=mysql-3
# Docker customizable @ run time
DB_HOST_3=${DB_HOST_3}
# Docker customizable @ run time
DB_PORT_3=${DB_PORT_3:-3308}
DB_DATABASE_3="${DB_DATABASE}"
DB_USERNAME_3="${DB_USERNAME}"
DB_PASSWORD_3="${DB_PASSWORD}"

## Default connection
## NOTE: These values will be updated by the application in the event of a DB failure to
##       ensure that a connection config change is cached for subsequent requests.
DB_CONNECTION="${DB_CONNECTION_1}"
DB_HOST="${DB_HOST_1}"
DB_PORT="${DB_PORT_1}"
# runs very slow using hostname as DB_HOST

BROADCAST_DRIVER=redis
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=redis
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=memcached

# Docker customizable @ run time
REDIS_HOST=${REDIS_HOST:-localhost}
REDIS_PASSWORD=null
# Docker customizable @ run time
REDIS_PORT=${REDIS_PORT:-6379}
REDIS_PREFIX=''

# Docker customizable @ run time
MAIL_MAILER=${MAIL_MAILER}
# Docker customizable @ run time
MAIL_HOST=${MAIL_HOST}
# Docker customizable @ run time
MAIL_PORT=${MAIL_PORT}
# Docker customizable @ run time
MAIL_USERNAME=${MAIL_USERNAME}
# Docker customizable @ run time
MAIL_PASSWORD=${MAIL_PASSWORD}
MAIL_ENCRYPTION=${MAIL_ENCRYPTION}
# Docker customizable @ run time
MAIL_FROM_ADDRESS="${MAIL_FROM_ADDRESS:-noreply@porta.solutions}"
# Docker customizable @ run time
MAIL_FROM_NAME=${MAIL_FROM_NAME}

## NOTE: AWS will not be used in most on-prem installations ##
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=##-- COMPLETE ME
AWS_USE_PATH_STYLE_ENDPOINT=false

# Plugins Bucket
# Also uses the defaults from above
AWS_PLUGIN_ACCESS_KEY_ID=##-- COMPLETE ME
AWS_PLUGIN_SECRET_ACCESS_KEY=##-- COMPLETE ME
AWS_PLUGIN_BUCKET=##-- COMPLETE ME
AWS_INTERNAL_PLUGIN_BUCKET=##-- COMPLETE ME

# Porta Builds Bucket
# Also uses the defaults from above
AWS_BUILDS_ACCESS_KEY_ID=##-- COMPLETE ME
AWS_BUILDS_SECRET_ACCESS_KEY=##-- COMPLETE ME
AWS_PORTA_BUILDS_BUCKET=##-- COMPLETE ME


D3_ACCOUNTS="denny.choi@disguise.one,test@test.com,d3@admin.com"
# Older versions of D3 (i.e., TF1) still use 'experimental'
# Docker customizable @ run time
D3_SOCKPUPPET_NAMESPACE=${APP_D3_SOCKPUPPET_NAMESPACE:-session}

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

SCOUT_DRIVER=meilisearch
MEILISEARCH_HOST=http://meilisearch:7700

API_PREFIX=api
API_SUBTYPE=app
API_VERSION=v1
# Docker customizable @ run time
API_DEBUG=${APP_DEBUG:-true}

SIGN_UP_RELEASE_TOKEN=false
PASSWORD_RESET_RELEASE_TOKEN=false

JWT_SECRET=
# Docker customizable @ run time
JWT_TTL=${JWT_TTL:-4320}
JWT_ALGO=HS256

WWWGROUP=1000
WWWUSER=1000

MEDIA_DISK=public

## FEATURE FLAGS ##
TELESCOPE_ENABLED=false
# Docker customizable @ run time
SCHEDULER_ENABLED=${APP_SCHEDULER_ENABLED:-false}

SOCKETIO_PING_PATH="/socket.io/?EIO=4&transport=polling"

################################################################################################
## ON-PREM SOCKET SERVERS
##
## Due to database replication on-prem, a unique value per machine cannot exist. Instead,
## failover to another socket server is handled by the application, which is why
## we're tracking the on-prem socket server details. The socket server host
## will match a database host; they're on the same host machine,
## so we can reuse those values

## Common
# Docker customizable @ run time
ONPREM_SOCKET_PORT=${SOCKET_PORT:-6001}

## Main on-prem socket server
ONPREM_SOCKET_CONNECTION_1=socket-1
ONPREM_SOCKET_HOST_1="${DB_HOST_1}"
ONPREM_SOCKET_PORT_1="${ONPREM_SOCKET_PORT}"

## Backup on-prem socket server
ONPREM_SOCKET_CONNECTION_2=socket-2
ONPREM_SOCKET_HOST_2="${DB_HOST_2}"
ONPREM_SOCKET_PORT_2="${ONPREM_SOCKET_PORT}"

## Default connection for both machines should be the Main machine's server
ONPREM_SOCKET_CONNECTION="${ONPREM_SOCKET_CONNECTION_1}"
ONPREM_SOCKET_HOST="${ONPREM_SOCKET_HOST_1}"

################################################################################################
